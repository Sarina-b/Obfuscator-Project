# Generated from MiniCLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,249,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,1,0,1,0,1,1,1,1,1,2,1,2,1,2,5,2,91,8,2,10,2,12,
        2,94,9,2,1,3,4,3,97,8,3,11,3,12,3,98,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,3,5,114,8,5,1,6,1,6,5,6,118,8,6,10,6,12,
        6,121,9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
        1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,
        1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,
        1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,
        1,37,1,37,1,38,1,38,1,39,4,39,233,8,39,11,39,12,39,234,1,39,1,39,
        1,40,1,40,1,40,1,40,5,40,243,8,40,10,40,12,40,246,9,40,1,40,1,40,
        1,119,0,41,1,0,3,0,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,
        10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,
        21,47,22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,30,65,31,67,
        32,69,33,71,34,73,35,75,36,77,37,79,38,81,39,1,0,4,3,0,65,90,95,
        95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,10,13,13,253,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
        0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,
        0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,1,83,1,0,0,0,3,85,1,
        0,0,0,5,87,1,0,0,0,7,96,1,0,0,0,9,100,1,0,0,0,11,113,1,0,0,0,13,
        115,1,0,0,0,15,124,1,0,0,0,17,131,1,0,0,0,19,134,1,0,0,0,21,139,
        1,0,0,0,23,145,1,0,0,0,25,149,1,0,0,0,27,156,1,0,0,0,29,163,1,0,
        0,0,31,169,1,0,0,0,33,173,1,0,0,0,35,178,1,0,0,0,37,183,1,0,0,0,
        39,185,1,0,0,0,41,187,1,0,0,0,43,189,1,0,0,0,45,191,1,0,0,0,47,193,
        1,0,0,0,49,196,1,0,0,0,51,199,1,0,0,0,53,201,1,0,0,0,55,203,1,0,
        0,0,57,206,1,0,0,0,59,209,1,0,0,0,61,212,1,0,0,0,63,215,1,0,0,0,
        65,217,1,0,0,0,67,219,1,0,0,0,69,221,1,0,0,0,71,223,1,0,0,0,73,225,
        1,0,0,0,75,227,1,0,0,0,77,229,1,0,0,0,79,232,1,0,0,0,81,238,1,0,
        0,0,83,84,7,0,0,0,84,2,1,0,0,0,85,86,7,1,0,0,86,4,1,0,0,0,87,92,
        3,1,0,0,88,91,3,1,0,0,89,91,3,3,1,0,90,88,1,0,0,0,90,89,1,0,0,0,
        91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,6,1,0,0,0,94,92,1,0,
        0,0,95,97,3,3,1,0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,1,0,0,0,98,99,
        1,0,0,0,99,8,1,0,0,0,100,101,5,39,0,0,101,102,9,0,0,0,102,103,5,
        39,0,0,103,10,1,0,0,0,104,105,5,116,0,0,105,106,5,114,0,0,106,107,
        5,117,0,0,107,114,5,101,0,0,108,109,5,102,0,0,109,110,5,97,0,0,110,
        111,5,108,0,0,111,112,5,115,0,0,112,114,5,101,0,0,113,104,1,0,0,
        0,113,108,1,0,0,0,114,12,1,0,0,0,115,119,5,34,0,0,116,118,9,0,0,
        0,117,116,1,0,0,0,118,121,1,0,0,0,119,120,1,0,0,0,119,117,1,0,0,
        0,120,122,1,0,0,0,121,119,1,0,0,0,122,123,5,34,0,0,123,14,1,0,0,
        0,124,125,5,115,0,0,125,126,5,116,0,0,126,127,5,114,0,0,127,128,
        5,117,0,0,128,129,5,99,0,0,129,130,5,116,0,0,130,16,1,0,0,0,131,
        132,5,105,0,0,132,133,5,102,0,0,133,18,1,0,0,0,134,135,5,101,0,0,
        135,136,5,108,0,0,136,137,5,115,0,0,137,138,5,101,0,0,138,20,1,0,
        0,0,139,140,5,119,0,0,140,141,5,104,0,0,141,142,5,105,0,0,142,143,
        5,108,0,0,143,144,5,101,0,0,144,22,1,0,0,0,145,146,5,102,0,0,146,
        147,5,111,0,0,147,148,5,114,0,0,148,24,1,0,0,0,149,150,5,114,0,0,
        150,151,5,101,0,0,151,152,5,116,0,0,152,153,5,117,0,0,153,154,5,
        114,0,0,154,155,5,110,0,0,155,26,1,0,0,0,156,157,5,112,0,0,157,158,
        5,114,0,0,158,159,5,105,0,0,159,160,5,110,0,0,160,161,5,116,0,0,
        161,162,5,102,0,0,162,28,1,0,0,0,163,164,5,115,0,0,164,165,5,99,
        0,0,165,166,5,97,0,0,166,167,5,110,0,0,167,168,5,102,0,0,168,30,
        1,0,0,0,169,170,5,105,0,0,170,171,5,110,0,0,171,172,5,116,0,0,172,
        32,1,0,0,0,173,174,5,99,0,0,174,175,5,104,0,0,175,176,5,97,0,0,176,
        177,5,114,0,0,177,34,1,0,0,0,178,179,5,98,0,0,179,180,5,111,0,0,
        180,181,5,111,0,0,181,182,5,108,0,0,182,36,1,0,0,0,183,184,5,43,
        0,0,184,38,1,0,0,0,185,186,5,45,0,0,186,40,1,0,0,0,187,188,5,42,
        0,0,188,42,1,0,0,0,189,190,5,47,0,0,190,44,1,0,0,0,191,192,5,61,
        0,0,192,46,1,0,0,0,193,194,5,61,0,0,194,195,5,61,0,0,195,48,1,0,
        0,0,196,197,5,33,0,0,197,198,5,61,0,0,198,50,1,0,0,0,199,200,5,60,
        0,0,200,52,1,0,0,0,201,202,5,62,0,0,202,54,1,0,0,0,203,204,5,60,
        0,0,204,205,5,61,0,0,205,56,1,0,0,0,206,207,5,62,0,0,207,208,5,61,
        0,0,208,58,1,0,0,0,209,210,5,38,0,0,210,211,5,38,0,0,211,60,1,0,
        0,0,212,213,5,124,0,0,213,214,5,124,0,0,214,62,1,0,0,0,215,216,5,
        33,0,0,216,64,1,0,0,0,217,218,5,46,0,0,218,66,1,0,0,0,219,220,5,
        40,0,0,220,68,1,0,0,0,221,222,5,41,0,0,222,70,1,0,0,0,223,224,5,
        123,0,0,224,72,1,0,0,0,225,226,5,125,0,0,226,74,1,0,0,0,227,228,
        5,59,0,0,228,76,1,0,0,0,229,230,5,44,0,0,230,78,1,0,0,0,231,233,
        7,2,0,0,232,231,1,0,0,0,233,234,1,0,0,0,234,232,1,0,0,0,234,235,
        1,0,0,0,235,236,1,0,0,0,236,237,6,39,0,0,237,80,1,0,0,0,238,239,
        5,47,0,0,239,240,5,47,0,0,240,244,1,0,0,0,241,243,8,3,0,0,242,241,
        1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,247,
        1,0,0,0,246,244,1,0,0,0,247,248,6,40,0,0,248,82,1,0,0,0,8,0,90,92,
        98,113,119,234,244,1,6,0,0
    ]

class MiniCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ID = 1
    INT_LITERAL = 2
    CHAR_LITERAL = 3
    BOOL_LITERAL = 4
    STRING_LITERAL = 5
    STRUCT = 6
    IF = 7
    ELSE = 8
    WHILE = 9
    FOR = 10
    RETURN = 11
    PRINTF = 12
    SCANF = 13
    INT = 14
    CHAR = 15
    BOOL = 16
    PLUS = 17
    MINUS = 18
    STAR = 19
    DIV = 20
    ASSIGN = 21
    EQUAL = 22
    NOTEQUAL = 23
    LT = 24
    GT = 25
    LE = 26
    GE = 27
    AND = 28
    OR = 29
    NOT = 30
    DOT = 31
    LPAREN = 32
    RPAREN = 33
    LBRACE = 34
    RBRACE = 35
    SEMI = 36
    COMMA = 37
    WS = 38
    COMMENT = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'struct'", "'if'", "'else'", "'while'", "'for'", "'return'", 
            "'printf'", "'scanf'", "'int'", "'char'", "'bool'", "'+'", "'-'", 
            "'*'", "'/'", "'='", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", 
            "'&&'", "'||'", "'!'", "'.'", "'('", "')'", "'{'", "'}'", "';'", 
            "','" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT_LITERAL", "CHAR_LITERAL", "BOOL_LITERAL", "STRING_LITERAL", 
            "STRUCT", "IF", "ELSE", "WHILE", "FOR", "RETURN", "PRINTF", 
            "SCANF", "INT", "CHAR", "BOOL", "PLUS", "MINUS", "STAR", "DIV", 
            "ASSIGN", "EQUAL", "NOTEQUAL", "LT", "GT", "LE", "GE", "AND", 
            "OR", "NOT", "DOT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
            "SEMI", "COMMA", "WS", "COMMENT" ]

    ruleNames = [ "LETTER", "DIGIT", "ID", "INT_LITERAL", "CHAR_LITERAL", 
                  "BOOL_LITERAL", "STRING_LITERAL", "STRUCT", "IF", "ELSE", 
                  "WHILE", "FOR", "RETURN", "PRINTF", "SCANF", "INT", "CHAR", 
                  "BOOL", "PLUS", "MINUS", "STAR", "DIV", "ASSIGN", "EQUAL", 
                  "NOTEQUAL", "LT", "GT", "LE", "GE", "AND", "OR", "NOT", 
                  "DOT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMI", 
                  "COMMA", "WS", "COMMENT" ]

    grammarFileName = "MiniCLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


